<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= typeof title !== 'undefined' ? title : 'File Uploader' %></title>

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Font Awesome -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
      rel="stylesheet"
    />
    <!-- Custom Layout CSS -->
    <style>
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      body {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
      }
      header {
        flex-shrink: 0;
      }
      main {
        flex-grow: 1;
      }
      footer {
        flex-shrink: 0;
      }
      .navbar {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      .navbar-brand {
        font-weight: bold;
      }
      .nav-link {
        position: relative;
      }
      .nav-link.active {
        color: var(--bs-primary) !important;
      }
      .nav-link.active::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background-color: var(--bs-primary);
      }
      .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        min-width: 300px;
      }

      /* Upload Area Styles */
      .upload-area {
        border: 2px dashed #dee2e6;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        background: #f8f9fa;
        transition: all 0.3s ease;
        cursor: pointer;
      }

      .upload-area:hover,
      .upload-area.dragover {
        border-color: #007bff;
        background: #e9ecef;
      }

      .upload-icon {
        font-size: 3rem;
        color: #6c757d;
        margin-bottom: 1rem;
      }

      .upload-area:hover .upload-icon {
        color: #007bff;
      }

      /* File List Styles */
      .file-list {
        margin-top: 2rem;
      }

      .file-item {
        display: flex;
        align-items: center;
        padding: 1rem;
        background: white;
        border-radius: 8px;
        margin-bottom: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s;
      }

      .file-item:hover {
        transform: translateX(5px);
      }

      .file-icon {
        font-size: 2rem;
        margin-right: 1rem;
        width: 40px;
        text-align: center;
      }

      .file-info {
        flex-grow: 1;
      }

      .file-name {
        margin: 0;
        font-weight: 500;
      }

      .file-size {
        color: #6c757d;
        font-size: 0.875rem;
      }

      .file-progress {
        width: 100px;
        margin: 0 1rem;
      }

      .file-actions {
        display: flex;
        gap: 0.5rem;
      }

      .file-actions button {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
      }

      /* Loading Animation */
      .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s, visibility 0.3s;
      }

      .loading-overlay.active {
        opacity: 1;
        visibility: visible;
      }

      .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>
  </head>
  <body>
    <%- include('partials/header.ejs', { activePage: 'upload' }) %>

    <main class="container py-4">
      <div class="row justify-content-center">
        <div class="col-md-8">
          <div class="card">
            <div class="card-body">
              <h2 class="card-title text-center mb-4">Upload Files</h2>

              <!-- Upload Area -->
              <div class="upload-area" id="uploadArea">
                <i class="fas fa-cloud-upload-alt upload-icon"></i>
                <h4>Drag & Drop Files Here</h4>
                <p class="text-muted">or</p>
                <input
                  type="file"
                  id="fileInput"
                  multiple
                  class="d-none"
                  accept=".jpg,.jpeg,.png,.gif,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.zip,.rar,.7z"
                />
                <button
                  class="btn btn-primary"
                  onclick="document.getElementById('fileInput').click()"
                >
                  <i class="fas fa-folder-open me-2"></i>
                  Choose Files
                </button>
                <p class="text-muted mt-2">
                  <small>Maximum file size: 10MB</small><br />
                  <small
                    >Accepted file types: Images (JPG, PNG, GIF), Documents
                    (PDF, DOC, DOCX, XLS, XLSX, PPT, PPTX, TXT), Archives (ZIP,
                    RAR, 7Z)</small
                  >
                </p>
              </div>

              <!-- File List -->
              <div class="file-list" id="fileList"></div>

              <!-- Upload Button -->
              <div class="text-center mt-4">
                <button
                  id="uploadButton"
                  class="btn btn-success btn-lg"
                  disabled
                  onclick="uploadFiles()"
                >
                  <i class="fas fa-upload me-2"></i>
                  Upload Files
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>

    <!-- Loading Overlay -->
    <div class="loading-overlay">
      <div class="loading-spinner"></div>
    </div>

    <%- include('partials/footer.ejs') %>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Axios JS -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <!-- Custom JS -->
    <script>
      // Notification system
      function showNotification(message, type = "info") {
        const notification = document.createElement("div");
        notification.className = `notification alert alert-${type} alert-dismissible fade show`;
        notification.innerHTML = `
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.body.appendChild(notification);

        // Auto dismiss after 5 seconds
        setTimeout(() => {
          notification.classList.remove("show");
          setTimeout(() => notification.remove(), 150);
        }, 5000);
      }

      const uploadArea = document.getElementById("uploadArea");
      const fileInput = document.getElementById("fileInput");
      const fileList = document.getElementById("fileList");
      const uploadButton = document.getElementById("uploadButton");
      const loadingOverlay = document.querySelector(".loading-overlay");

      let filesToUpload = [];

      // Function to show/hide loading overlay
      function toggleLoading(show) {
        loadingOverlay.classList.toggle("active", show);
      }

      // Function to format file size
      function formatFileSize(bytes) {
        if (bytes === 0) return "0 Bytes";
        const k = 1024;
        const sizes = ["Bytes", "KB", "MB", "GB"];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
      }

      // Function to get file icon
      function getFileIcon(file) {
        if (file.type.startsWith("image/")) return "fa-file-image text-primary";
        if (file.type.includes("pdf")) return "fa-file-pdf text-danger";
        if (file.type.includes("word") || file.type.includes("document"))
          return "fa-file-word text-primary";
        if (file.type.includes("excel") || file.type.includes("sheet"))
          return "fa-file-excel text-success";
        if (
          file.type.includes("powerpoint") ||
          file.type.includes("presentation")
        )
          return "fa-file-powerpoint text-warning";
        if (file.type.startsWith("video/")) return "fa-file-video text-info";
        if (file.type.startsWith("audio/"))
          return "fa-file-audio text-secondary";
        if (file.type.includes("zip") || file.type.includes("rar"))
          return "fa-file-archive text-dark";
        return "fa-file text-secondary";
      }

      // Function to add file to list
      function addFileToList(file) {
        const fileItem = document.createElement("div");
        fileItem.className = "file-item";
        fileItem.innerHTML = `
          <div class="file-icon">
            <i class="fas ${getFileIcon(file)}"></i>
          </div>
          <div class="file-info">
            <h6 class="file-name">${file.name}</h6>
            <span class="file-size">${formatFileSize(file.size)}</span>
          </div>
          <div class="file-progress">
            <div class="progress">
              <div class="progress-bar" role="progressbar" style="width: 0%"></div>
            </div>
          </div>
          <div class="file-actions">
            <button class="btn btn-sm btn-outline-danger" onclick="removeFile('${
              file.name
            }')">
              <i class="fas fa-times"></i>
            </button>
          </div>
        `;
        fileList.appendChild(fileItem);
      }

      // Function to remove file from list
      function removeFile(fileName) {
        filesToUpload = filesToUpload.filter((file) => file.name !== fileName);
        updateFileList();
        updateUploadButton();
      }

      // Function to update file list
      function updateFileList() {
        fileList.innerHTML = "";
        filesToUpload.forEach((file) => addFileToList(file));
      }

      // Function to update upload button state
      function updateUploadButton() {
        uploadButton.disabled = filesToUpload.length === 0;
      }

      // Function to handle file selection
      function handleFiles(files) {
        const newFiles = Array.from(files).filter((file) => {
          // Check file size (10MB limit)
          if (file.size > 10 * 1024 * 1024) {
            showNotification(
              `File ${file.name} is too large. Maximum size is 10MB.`,
              "danger"
            );
            return false;
          }

          // Check file type
          const allowedTypes = [
            "image/jpeg",
            "image/png",
            "image/gif",
            "application/pdf",
            "application/msword",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "application/vnd.ms-excel",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "application/vnd.ms-powerpoint",
            "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            "text/plain",
            "application/zip",
            "application/x-rar-compressed",
            "application/x-7z-compressed",
          ];

          if (!allowedTypes.includes(file.type)) {
            showNotification(
              `File ${file.name} is not an accepted file type.`,
              "danger"
            );
            return false;
          }

          return true;
        });

        filesToUpload = [...filesToUpload, ...newFiles];
        updateFileList();
        updateUploadButton();
      }

      // Function to upload files
      async function uploadFiles() {
        if (filesToUpload.length === 0) return;

        toggleLoading(true);
        const formData = new FormData();
        filesToUpload.forEach((file) => formData.append("files", file));

        try {
          const response = await axios.post("/upload", formData, {
            headers: {
              "Content-Type": "multipart/form-data",
            },
            onUploadProgress: (progressEvent) => {
              const percentCompleted = Math.round(
                (progressEvent.loaded * 100) / progressEvent.total
              );
              document.querySelectorAll(".progress-bar").forEach((bar) => {
                bar.style.width = percentCompleted + "%";
              });
            },
          });

          if (response.data.success) {
            showNotification("Files uploaded successfully!", "success");
            filesToUpload = [];
            updateFileList();
            updateUploadButton();
          }
        } catch (error) {
          showNotification(
            error.response?.data?.message || "Error uploading files",
            "danger"
          );
        } finally {
          toggleLoading(false);
        }
      }

      // Event Listeners
      uploadArea.addEventListener("dragover", (e) => {
        e.preventDefault();
        uploadArea.classList.add("dragover");
      });

      uploadArea.addEventListener("dragleave", () => {
        uploadArea.classList.remove("dragover");
      });

      uploadArea.addEventListener("drop", (e) => {
        e.preventDefault();
        uploadArea.classList.remove("dragover");
        handleFiles(e.dataTransfer.files);
      });

      fileInput.addEventListener("change", (e) => {
        handleFiles(e.target.files);
        e.target.value = ""; // Reset input
      });

      // Initialize
      toggleLoading(false);
    </script>
  </body>
</html>
