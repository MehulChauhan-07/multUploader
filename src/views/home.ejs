<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= typeof title !== 'undefined' ? title : 'File Uploader' %></title>

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Font Awesome -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
      rel="stylesheet"
    />
    <!-- Custom Layout CSS (Essential for sticky footer) -->
    <style>
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      body {
        display: flex;
        flex-direction: column;
        min-height: 100vh; /* Ensure body takes at least full viewport height */
      }
      header {
        flex-shrink: 0; /* Prevent header from shrinking */
      }
      main {
        flex-grow: 1; /* Makes the main content expand and push footer down */
      }
      footer {
        flex-shrink: 0; /* Prevent footer from shrinking */
      }
      /* Custom Styles (can be moved to a separate file later) */
      .navbar {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      .navbar-brand {
        font-weight: bold;
      }
      .nav-link {
        position: relative;
      }
      .nav-link.active {
        color: var(--bs-primary) !important;
      }
      .nav-link.active::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background-color: var(--bs-primary);
      }
      /* Notification Styles */
      .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        min-width: 300px;
      }
    </style>

    <!-- Styles for this page -->
    <style>
      .drop-zone {
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        padding: 2rem;
        text-align: center;
        background-color: #f8f9fa;
        transition: all 0.3s ease;
        cursor: pointer;
      }

      .drop-zone.dragover {
        border-color: var(--bs-primary);
        background-color: rgba(var(--bs-primary-rgb), 0.1);
      }

      .file-preview {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 1rem;
      }

      .file-item {
        position: relative;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
        background-color: white;
      }

      .file-item img {
        width: 100%;
        height: 150px;
        object-fit: cover;
      }

      .remove-file {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .remove-file:hover {
        background-color: #dc3545;
        color: white;
      }
    </style>
  </head>
  <body>
    <%- include('partials/header.ejs', { activePage: activePage }) %>

    <main class="container py-4">
      <div class="row justify-content-center">
        <div class="col-md-8">
          <div class="card">
            <div class="card-body">
              <h2 class="card-title text-center mb-4">
                <i class="fas fa-cloud-upload-alt text-primary me-2"></i>
                Upload Files
              </h2>

              <!-- Upload Zone -->
              <div class="drop-zone" id="dropZone">
                <i class="fas fa-cloud-upload-alt fa-3x text-primary mb-3"></i>
                <h4>Drag & Drop Files Here</h4>
                <p class="text-muted">or</p>
                <input type="file" id="fileInput" multiple class="d-none" />
                <button
                  class="btn btn-primary"
                  onclick="document.getElementById('fileInput').click()"
                >
                  <i class="fas fa-folder-open me-2"></i>
                  Browse Files
                </button>
                <p class="text-muted mt-2 small">
                  Supported formats: Images (JPG, PNG, GIF), Documents (PDF,
                  DOC, DOCX), Text files
                </p>
              </div>

              <!-- File Preview -->
              <div id="filePreview" class="file-preview mt-4"></div>

              <!-- Upload Progress -->
              <div id="uploadProgress" class="mt-4" style="display: none">
                <div class="d-flex justify-content-between mb-2">
                  <span>Uploading...</span>
                  <span id="uploadPercentage">0%</span>
                </div>
                <div class="progress">
                  <div
                    id="progressBar"
                    class="progress-bar progress-bar-striped progress-bar-animated"
                    role="progressbar"
                    style="width: 0%"
                  ></div>
                </div>
              </div>

              <!-- Upload Button -->
              <div class="text-center mt-4">
                <button
                  id="uploadButton"
                  class="btn btn-primary btn-lg"
                  disabled
                >
                  <i class="fas fa-upload me-2"></i>
                  Upload Files
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>

    <%- include('partials/footer.ejs') %>

    <!-- Notification Container -->
    <div id="notificationContainer"></div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Axios JS -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <!-- Custom JS -->
    <script>
      // Notification system
      function showNotification(message, type = "info") {
        const container = document.getElementById("notificationContainer");
        const notification = document.createElement("div");
        notification.className = `notification alert alert-${type} alert-dismissible fade show`;
        notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
        container.appendChild(notification);

        // Auto dismiss after 5 seconds
        setTimeout(() => {
          notification.classList.remove("show");
          setTimeout(() => notification.remove(), 150);
        }, 5000);
      }
    </script>

    <script>
      const dropZone = document.getElementById("dropZone");
      const fileInput = document.getElementById("fileInput");
      const filePreview = document.getElementById("filePreview");
      const uploadButton = document.getElementById("uploadButton");
      const uploadProgress = document.getElementById("uploadProgress");
      const progressBar = document.getElementById("progressBar");
      const uploadPercentage = document.getElementById("uploadPercentage");

      let files = [];

      // Drag and drop handlers
      ["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
        dropZone.addEventListener(eventName, preventDefaults, false);
      });

      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }

      ["dragenter", "dragover"].forEach((eventName) => {
        dropZone.addEventListener(eventName, highlight, false);
      });

      ["dragleave", "drop"].forEach((eventName) => {
        dropZone.addEventListener(eventName, unhighlight, false);
      });

      function highlight(e) {
        dropZone.classList.add("dragover");
      }

      function unhighlight(e) {
        dropZone.classList.remove("dragover");
      }

      dropZone.addEventListener("drop", handleDrop, false);

      function handleDrop(e) {
        const dt = e.dataTransfer;
        const newFiles = [...dt.files];
        handleFiles(newFiles);
      }

      fileInput.addEventListener("change", function () {
        handleFiles([...this.files]);
      });

      function handleFiles(newFiles) {
        files = [...files, ...newFiles];
        updateFilePreview();
        uploadButton.disabled = files.length === 0;
      }

      function updateFilePreview() {
        filePreview.innerHTML = "";
        files.forEach((file, index) => {
          const fileItem = document.createElement("div");
          fileItem.className = "file-item";

          if (file.type.startsWith("image/")) {
            const img = document.createElement("img");
            img.src = URL.createObjectURL(file);
            fileItem.appendChild(img);
          } else {
            const icon = document.createElement("div");
            icon.className = "p-3 text-center";
            icon.innerHTML = `<i class="fas fa-file fa-3x text-primary"></i>`;
            fileItem.appendChild(icon);
          }

          const removeButton = document.createElement("div");
          removeButton.className = "remove-file";
          removeButton.innerHTML = '<i class="fas fa-times"></i>';
          removeButton.onclick = () => removeFile(index);
          fileItem.appendChild(removeButton);

          const fileName = document.createElement("div");
          fileName.className = "p-2 text-center small";
          fileName.textContent = file.name;
          fileItem.appendChild(fileName);

          filePreview.appendChild(fileItem);
        });
      }

      function removeFile(index) {
        files.splice(index, 1);
        updateFilePreview();
        uploadButton.disabled = files.length === 0;
      }

      uploadButton.addEventListener("click", async () => {
        if (files.length === 0) return;

        const formData = new FormData();
        files.forEach((file) => {
          formData.append("files", file);
        });

        try {
          uploadButton.disabled = true;
          uploadProgress.style.display = "block";

          const response = await axios.post("/api/upload", formData, {
            headers: {
              "Content-Type": "multipart/form-data",
            },
            onUploadProgress: (progressEvent) => {
              const percentCompleted = Math.round(
                (progressEvent.loaded * 100) / progressEvent.total
              );
              progressBar.style.width = percentCompleted + "%";
              uploadPercentage.textContent = percentCompleted + "%";
            },
          });

          showNotification("Files uploaded successfully!", "success");
          files = [];
          updateFilePreview();
          uploadButton.disabled = true;
          uploadProgress.style.display = "none";
          progressBar.style.width = "0%";
          uploadPercentage.textContent = "0%";
        } catch (error) {
          showNotification(
            error.response?.data?.message || "Error uploading files",
            "danger"
          );
          uploadButton.disabled = false;
        }
      });
    </script>
  </body>
</html>
