<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= typeof title !== 'undefined' ? title : 'File Uploader' %></title>

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Font Awesome -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
      rel="stylesheet"
    />
    <!-- Custom Layout CSS (Essential for sticky footer) -->
    <style>
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      body {
        display: flex;
        flex-direction: column;
        min-height: 100vh; /* Ensure body takes at least full viewport height */
      }
      header {
        flex-shrink: 0; /* Prevent header from shrinking */
      }
      main {
        flex-grow: 1; /* Makes the main content expand and push footer down */
      }
      footer {
        flex-shrink: 0; /* Prevent footer from shrinking */
      }
      /* Custom Styles (can be moved to a separate file later) */
      .navbar {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      .navbar-brand {
        font-weight: bold;
      }
      .nav-link {
        position: relative;
      }
      .nav-link.active {
        color: var(--bs-primary) !important;
      }
      .nav-link.active::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background-color: var(--bs-primary);
      }
      /* Notification Styles */
      .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        min-width: 300px;
      }
    </style>

    <!-- Styles for this page -->
    <style>
      .gallery-item {
        position: relative;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
        background-color: white;
        transition: all 0.3s ease;
      }

      .gallery-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }

      .gallery-item img {
        width: 100%;
        height: 200px;
        object-fit: cover;
      }

      .gallery-actions {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .gallery-item:hover .gallery-actions {
        opacity: 1;
      }

      .gallery-actions a {
        color: white;
        background-color: rgba(255, 255, 255, 0.2);
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
      }

      .gallery-actions a:hover {
        background-color: var(--bs-primary);
        transform: scale(1.1);
      }

      .gallery-actions .delete-file:hover {
        background-color: #dc3545;
      }
    </style>
  </head>
  <body>
    <%- include('partials/header.ejs', { activePage: activePage }) %>

    <main class="container py-4">
      <div class="row mb-4">
        <div class="col-md-6">
          <div class="input-group">
            <span class="input-group-text">
              <i class="fas fa-search"></i>
            </span>
            <input
              type="text"
              id="searchInput"
              class="form-control"
              placeholder="Search files by name or type..."
            />
          </div>
        </div>
        <div class="col-md-6">
          <div class="d-flex gap-2">
            <select id="fileTypeFilter" class="form-select" onchange="filterByType(this.value)">
              <option value="all" <%= selectedType === 'all' ? 'selected' : '' %>>All File Types</option>
              <option value="image" <%= selectedType === 'image' ? 'selected' : '' %>>Images</option>
              <option value="pdf" <%= selectedType === 'pdf' ? 'selected' : '' %>>PDFs</option>
              <option value="doc" <%= selectedType === 'doc' ? 'selected' : '' %>>Documents</option>
              <option value="video" <%= selectedType === 'video' ? 'selected' : '' %>>Videos</option>
              <option value="audio" <%= selectedType === 'audio' ? 'selected' : '' %>>Audio</option>
              <option value="archive" <%= selectedType === 'archive' ? 'selected' : '' %>>Archives</option>
              <option value="other" <%= selectedType === 'other' ? 'selected' : '' %>>Others</option>
            </select>
            <select id="sortOrder" class="form-select">
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="name-asc">Name (A-Z)</option>
              <option value="name-desc">Name (Z-A)</option>
              <option value="size-asc">Size (Smallest)</option>
              <option value="size-desc">Size (Largest)</option>
            </select>
          </div>
        </div>
      </div>

      <div class="row" id="fileGrid">
        <% files.forEach(file => { %>
        <div
          class="col-md-4 col-lg-3 mb-4 file-item"
          data-filename="<%= file.filename.toLowerCase() %>"
          data-filetype="<%= file.mimetype.split('/')[0] %>"
          data-uploaded="<%= file.uploadedAt %>"
          data-size="<%= file.size %>"
        >
          <div class="card h-100">
            <div class="card-img-top file-preview">
              <% if (file.mimetype.startsWith('image/')) { %>
              <img
                src="/uploads/<%= file.filename %>"
                alt="<%= file.originalname %>"
                class="img-fluid"
              />
              <% } else { %>
              <div class="file-icon">
                <% if (file.mimetype.includes('pdf')) { %>
                <i class="fas fa-file-pdf fa-3x text-danger"></i>
                <% } else if (file.mimetype.includes('word') ||
                file.mimetype.includes('document')) { %>
                <i class="fas fa-file-word fa-3x text-primary"></i>
                <% } else if (file.mimetype.includes('excel') ||
                file.mimetype.includes('spreadsheet')) { %>
                <i class="fas fa-file-excel fa-3x text-success"></i>
                <% } else if (file.mimetype.includes('powerpoint') ||
                file.mimetype.includes('presentation')) { %>
                <i class="fas fa-file-powerpoint fa-3x text-warning"></i>
                <% } else if (file.mimetype.includes('video')) { %>
                <i class="fas fa-file-video fa-3x text-info"></i>
                <% } else if (file.mimetype.includes('audio')) { %>
                <i class="fas fa-file-audio fa-3x text-secondary"></i>
                <% } else if (file.mimetype.includes('zip') ||
                file.mimetype.includes('rar')) { %>
                <i class="fas fa-file-archive fa-3x text-dark"></i>
                <% } else { %>
                <i class="fas fa-file fa-3x text-secondary"></i>
                <% } %>
              </div>
              <% } %>
            </div>
            <div class="card-body">
              <h5
                class="card-title text-truncate"
                title="<%= file.originalname %>"
              >
                <%= file.originalname %>
              </h5>
              <p class="card-text">
                <small class="text-muted">
                  <i class="fas fa-file me-1"></i>
                  <%= file.mimetype.split('/')[1].toUpperCase() %>
                </small>
                <br />
                <small class="text-muted">
                  <i class="fas fa-calendar me-1"></i>
                  <%= new Date(file.uploadedAt).toLocaleDateString() %>
                </small>
                <br />
                <small class="text-muted">
                  <i class="fas fa-weight me-1"></i>
                  <%= (file.size / 1024).toFixed(2) %> KB
                </small>
              </p>
            </div>
            <div class="card-footer bg-transparent border-top-0">
              <div class="btn-group w-100">
                <a
                  href="/uploads/<%= file.filename %>"
                  class="btn btn-sm btn-outline-primary"
                  download
                >
                  <i class="fas fa-download me-1"></i>
                  Download
                </a>
                <button
                  class="btn btn-sm btn-outline-danger delete-file"
                  data-filename="<%= file.filename %>"
                >
                  <i class="fas fa-trash me-1"></i>
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>
        <% }); %>
      </div>
    </main>

    <%- include('partials/footer.ejs') %>

    <!-- Notification Container -->
    <div id="notificationContainer"></div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Axios JS -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <!-- Custom JS -->
    <script>
      // Notification system
      function showNotification(message, type = "info") {
        const container = document.getElementById("notificationContainer");
        const notification = document.createElement("div");
        notification.className = `notification alert alert-${type} alert-dismissible fade show`;
        notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
        container.appendChild(notification);

        // Auto dismiss after 5 seconds
        setTimeout(() => {
          notification.classList.remove("show");
          setTimeout(() => notification.remove(), 150);
        }, 5000);
      }
    </script>

    <script>
      // File filtering and search functionality
      const searchInput = document.getElementById('searchInput');
      const fileTypeFilter = document.getElementById('fileTypeFilter');
      const sortOrder = document.getElementById('sortOrder');
      const fileGrid = document.getElementById('fileGrid');

      // Function to filter by type using backend
      function filterByType(type) {
        window.location.href = `/gallery?type=${type}`;
      }

      function filterAndSortFiles() {
        const searchTerm = searchInput.value.toLowerCase();
        const sortBy = sortOrder.value;
        const fileItems = Array.from(document.querySelectorAll('.file-item'));

        // Filter files by search term
        fileItems.forEach(item => {
          const filename = item.dataset.filename;
          const matchesSearch = filename.includes(searchTerm);
          item.style.display = matchesSearch ? '' : 'none';
        });

        // Sort files
        const visibleItems = fileItems.filter(item => item.style.display !== 'none');
        visibleItems.sort((a, b) => {
          switch (sortBy) {
            case 'newest':
              return new Date(b.dataset.uploaded) - new Date(a.dataset.uploaded);
            case 'oldest':
              return new Date(a.dataset.uploaded) - new Date(b.dataset.uploaded);
            case 'name-asc':
              return a.dataset.filename.localeCompare(b.dataset.filename);
            case 'name-desc':
              return b.dataset.filename.localeCompare(a.dataset.filename);
            case 'size-asc':
              return parseInt(a.dataset.size) - parseInt(b.dataset.size);
            case 'size-desc':
              return parseInt(b.dataset.size) - parseInt(a.dataset.size);
            default:
              return 0;
          }
        });

        // Reorder files in the grid
        visibleItems.forEach(item => fileGrid.appendChild(item));
      }

      // Add event listeners
      searchInput.addEventListener('input', filterAndSortFiles);
      sortOrder.addEventListener('change', filterAndSortFiles);

      // File deletion functionality
      document.querySelectorAll('.delete-file').forEach(button => {
        button.addEventListener('click', async function() {
          const filename = this.dataset.filename;
          if (confirm('Are you sure you want to delete this file?')) {
            try {
              const response = await axios.delete(`/api/files/${filename}`);
              if (response.data.success) {
                this.closest('.col-md-4').remove();
                showNotification('File deleted successfully', 'success');
              }
            } catch (error) {
              showNotification(error.response?.data?.message || 'Error deleting file', 'danger');
            }
          }
        });
      });
    </script>
  </body>
</html>
